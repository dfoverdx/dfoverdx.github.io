{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/v4/core/index.js","webpack:///./src/v4/dxdt/index.js","webpack:///./src/v4/betterttv/index.js","webpack:///./src/v4/betterttv/socket.js","webpack:///./src/v4/betterttv/pro_user.js","webpack:///./src/v4/gamewisp/sub.js","webpack:///./src/v4/gamewisp/index.js","webpack:///./src/v4/gamewisp/socket.js","webpack:///./src/v4/index.js","webpack:///./src/v4/liriklive/socket.js","webpack:///./src/v4/liriklive/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","e","FrankerFaceZ","register","utilities","Module","[object Object]","args","super","this","inject","helpers","26964566","title","11819690","36442149","29519423","22025290","4867723","supporters","added_supporters","log","debug","initDeveloper","initSupporters","badges","loadBadgeData","id","color","slot","image","urls","1","2","4","chat","getUser","addBadge","supporterBadge","response","fetch","ok","data","json","length","user","ffzUser","badge","tier","badge_color","badge_is_colored","no_invert","push","users","includes","level","username","fetchSupporters","fetchLegacySupporters","enable","__webpack_exports__","Dxdt","settings","enableReply","_lastMentioner","add","ui","path","description","component","ChatInput","fine","define","setChatInputRef","site","constructor","CHAT_ROUTES","document","addEventListener","altKey","_reply","on","message","mentioned","userDisplayName","textarea","Array","from","instances","map","chatInputRef","start","selectionStart","end","selectionEnd","slice","GIF_EMOTES_MODE","context","updateEmotes","socket","connect","room","iterateRooms","updateChannel","ProUsers","unload","disconnectInternal","pro_users","night_subs","override_emotes","roomAdd","roomRemove","addBadges","parent","events","_looked_up_users","_connected","_connecting","_connect_attempts","_joined_channels","_connection_buffer","_events","info","WebSocket","onopen","channel","joinChannel","broadcastMe","reconnecting","onerror","error","reconnect","onclose","onmessage","evt","JSON","parse","disconnect","setTimeout","Math","random","pow","close","event","send","stringify","emit","login","partChannel","getSocketEvents","updateGlobalEmotes","hookBTTVSettingChange","lookup_user","subscription","pro","emotes","emotes_array","loadEmotes","emotesArray","initialize","_id_emotes","_emote","emote","code","width","height","owner","display_name","require_spaces","imageType","getAnimatedEmoteMode","DISABLED","STATIC","set","emoticons","source","icon","loadSetData","addSet","unloadSet","subscribed","newAttempts","window","BetterTTV","emoteMode","attempts","types","_types","_users","_type","badgeData","svg","_user","type","status","realID","removeDefaultSet","globalBttv","overrideEmotes","nightSubEmotes","urlTemplate","dataEmote","requireSpaces","test","regex","url","emoteTemplate","replace","indexOf","restrictions","emoticonSet","sort","setEmotes","concat","addDefaultSet","removeSet","channelBttv","bots","bot","emoteFromArray","Sub","emoteIds","emote_ids","addUserBadge","reloadBadges","badgeId","channels","getEmote","gw_channel","_emote_sets","has_prefix","_set_name","getBadge","getRoom","twitch_channel","removeBadge","ffz_data","emote_set","changed","enabled","sub_badges","_badge","replaces","subs","sub_emotes","subbed_to","msgpack","createElement","src","head","appendChild","binaryType","joinRoom","decode","Uint8Array","leaveRoom","sub_data","index","splice","globalEmotes","image_asset","content","small","medium","large","shortcode","gwChannel","baseUrl","twitchChannel","replace_mode","initialize_room","gameWispChannel","isLaunched","subbed","isGameWispSub","gwData","addEmote","userStore","_emoteIds","userStoreBadges","update_room","emoteIDs","leave_room","REQUEST_TYPES","AUTHORIZE","PONG","CHANNEL_SUBSCRIBE","CHANNEL_UNSUBSCRIBE","ANNOUNCE_MESSAGE","EVENT_TYPES","READY","AUTHORIZED","PING","CHANNEL_SUBSCRIPTION_ADDED","CHANNEL_SUBSCRIPTION_REMOVED","USER_CHANNEL_DATA","USER_FLAGS","EXTENSION_DEV","EXTENSION_ADMIN","LIRIK_SUB","_last_emote_id","_ready","c_d","u_id","f","flags","s_m","event_type","channel_id","c_id","preSendMessage","announceMessage","global","gifs","gifMode","emoteName","modifier","force_global","subscriber","merge_id","restricted","updateSubscriberEmotes","updateRestrictedEmotes"],"mappings":"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","file":"demeter.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","/* global FrankerFaceZ, fetch */\n\nclass FFZAP extends FrankerFaceZ.utilities.module.Module {\n    constructor(...args) {\n        super(...args);\n\n        this.inject('chat');\n        this.inject('chat.emotes');\n        this.inject('chat.badges');\n\n        this.helpers = {\n            26964566: { // Lordmau5\n                title: 'FFZ:AP Developer',\n            },\n            11819690: { // Jugachi\n                title: 'FFZ:AP Helper',\n            },\n            36442149: { // mieDax\n                title: 'FFZ:AP Helper',\n            },\n            29519423: { // Quanto\n                title: 'FFZ:AP Helper',\n            },\n            22025290: { // trihex\n                title: 'FFZ:AP Helper',\n            },\n            4867723: { // Wolsk\n                title: 'FFZ:AP Helper',\n            },\n        };\n\n        this.supporters = {};\n        this.added_supporters = [];\n    }\n\n    onEnable() {\n        this.log.debug('FFZ:AP\\'s Core module was enabled successfully.');\n\n        this.initDeveloper();\n        this.initSupporters();\n    }\n\n    async initDeveloper() {\n        const developerBadge = {\n            id: 'developer',\n            title: 'FFZ:AP Developer',\n            color: '#E4107F',\n            slot: 6,\n            image: 'https://api.ffzap.com/user/badge/26964566/1',\n            urls: {\n                1: 'https://api.ffzap.com/user/badge/26964566/1',\n                2: 'https://api.ffzap.com/user/badge/26964566/2',\n                4: 'https://api.ffzap.com/user/badge/26964566/3',\n            },\n        };\n\n        this.badges.loadBadgeData('addon--ffzap.core--badges-developer', developerBadge);\n\n        this.chat.getUser(26964566).addBadge('addon--ffzap.core', 'addon--ffzap.core--badges-developer');\n    }\n\n    async fetchSupporters() {\n        const host = 'https://api.ffzap.com/supporters';\n\n        const supporterBadge = {\n            id: 'supporter',\n            title: 'FFZ:AP Supporter',\n            color: '#755000',\n            slot: 6,\n            image: 'https://api.ffzap.com/user/badge/default/1',\n            urls: {\n                1: 'https://api.ffzap.com/user/badge/default/1',\n                2: 'https://api.ffzap.com/user/badge/default/2',\n                4: 'https://api.ffzap.com/user/badge/default/3',\n            },\n        };\n\n        const response = await fetch(host);\n        if (response.ok) {\n            const data = await response.json();\n\n            this.badges.loadBadgeData('addon--ffzap.core--badges-supporter', supporterBadge);\n\t\n            for (let i = 0; i < data.length; i++) {\n                const user = data[i];\n                if (user.id === 26964566) continue;\n\n                const ffzUser = this.chat.getUser(user.id);\n\t\n                const badge = {\n                    title: (this.helpers[user.id] && this.helpers[user.id].title) || 'FFZ:AP Supporter',\n                    color: user.tier >= 2 && user.badge_color || supporterBadge.color,\n                    image: `https://api.ffzap.com/user/badge/${user.id}/1`,\n                    urls: {\n                        1: `https://api.ffzap.com/user/badge/${user.id}/1`,\n                        2: `https://api.ffzap.com/user/badge/${user.id}/2`,\n                        4: `https://api.ffzap.com/user/badge/${user.id}/3`,\n                    },\n                };\n\n                if (user.tier >= 3 && user.badge_is_colored) {\n                    badge.no_invert = true;\n                }\n\n                ffzUser.addBadge('addon--ffzap.core', 'addon--ffzap.core--badges-supporter', badge);\n                this.added_supporters.push(user.id);\n            }\n        }\n    }\n\n    async fetchLegacySupporters() {\n        const host = 'https://cdn.ffzap.com/supporters.json';\n\n        const response = await fetch(host);\n        if (response.ok) {\n            const data = await response.json();\n\t\n            for (let i = 0; i < data.users.length; i++) {\n                const user = data.users[i];\n                if (this.added_supporters.includes(user.id)) continue;\n\n                const ffzUser = this.chat.getUser(user.id);\n\t\n                const supporterBadge = {\n                    id: 'supporter',\n                };\n\t\n                if (user.level >= 2) { // Supporter Badge Color\n                    supporterBadge.color = user.badge_color;\n                }\n\t\n                if (user.level >= 3) { // Custom Supporter Badge Support\n                    supporterBadge.image = `https://cdn.ffzap.com/badges/t3/${user.username}_18.png`;\n                    supporterBadge.urls = {\n                        1: `https://cdn.ffzap.com/badges/t3/${user.username}_18.png`,\n                        2: `https://cdn.ffzap.com/badges/t3/${user.username}_36.png`,\n                        4: `https://cdn.ffzap.com/badges/t3/${user.username}_72.png`,\n                    };\n                }\n                ffzUser.addBadge('addon--ffzap.core', 'addon--ffzap.core--badges-supporter', supporterBadge);\n            }\n        }\n    }\n\n    async initSupporters() {\n        await this.fetchSupporters();\n        await this.fetchLegacySupporters();\n    }\n\n    // async initTier2Emotes() { // eslint-disable-line class-methods-use-this\n    // \tconst response = await fetch('https://api.frankerfacez.com/v1/set/105031');\n    // \tif (response.ok) {\n    // \t\tconst data = await response.json();\n    // \t\tdata.set.title = 'Monthly Emote-Vote';\n    // \t\tdata.set.source = 'FFZ:AP';\n    // \t\tthis.emotes.loadSetData('addon--ffzap.core--emotes-tier2', data.set);\n\t\n    // \t\tthis.chat.getUser(undefined, 'lordmau5').addSet('addon--ffzap.core', 'addon--ffzap.core--emotes-tier2');\n    // \t}\n    // }\n}\n\nFrankerFaceZ.get().register('addon.ffzap.core', FFZAP).enable();\n","/* global FrankerFaceZ */\n/// <reference path=\"../../../typings/frankerfacez/index.d.ts\" />\n\nconst settings = {\n    enableReply: 'ffzap.dxdt.enable_reply_keyboard_shortcut'\n};\n\nexport default class Dxdt extends FrankerFaceZ.utilities.module.Module {\n    constructor(...args) {\n        super(...args);\n\n        this.inject('settings');\n        this.inject('chat');\n        this.inject('site.fine');\n\n        this._lastMentioner = null;\n\n        this.settings.add(settings.enableReply, {\n            default: true,\n            ui: {\n                path: 'Add-Ons > FFZ:AP > dxdt >> Keyboard Shortcuts',\n                title: 'Reply keyboard shortcut',\n                description: 'Enable <kbd>alt</kbd>+<kbd>r</kbd> keyboard shortcut to reply to someone who @\\'s you in chat.',\n                component: 'setting-check-box'\n            }\n        });\n\n        this.ChatInput = this.fine.define(\n            'chat-input',\n            n => n && n.setChatInputRef,\n            FrankerFaceZ.get().site.constructor.CHAT_ROUTES\n        );\n    }\n\n    onEnable() {\n        this.log.debug(`FFZ:AP's Dxdt module was enabled successfully.`);\n\n        document.addEventListener('keyup', e => {\n            if (this.settings.get(settings.enableReply) && e.key === 'r' && e.altKey) {\n                this._reply();\n            }\n        });\n\n        this.chat.on('chat:receive-message', (e) => {\n            if (e.message.mentioned) {\n                this._lastMentioner = e.message.user.userDisplayName;\n            }\n        });\n    }\n\n    _reply() {\n        if (this._lastMentioner) {\n            for (let textarea of Array.from(this.ChatInput.instances).map(i => i.chatInputRef)) {\n                let value = textarea.value;\n                const start = textarea.selectionStart,\n                    end = textarea.selectionEnd;\n\n                textarea.value = `${value.slice(0, start)}@${this._lastMentioner} ${value.slice(end)}`;\n                textarea.selectionStart = textarea.selectionEnd = start + this._lastMentioner.length + 2;\n            }\n        }\n    }\n}\n\nFrankerFaceZ.get().register('addon.ffzap.dxdt', Dxdt).enable();","/* global FrankerFaceZ, fetch */\n\nimport Socket from './socket';\nimport ProUser from './pro_user';\n\nconst GIF_EMOTES_MODE = {\n    DISABLED: 0,\n    STATIC: 1,\n    ANIMATED: 2,\n};\n\nclass BetterTTV extends FrankerFaceZ.utilities.module.Module {\n    constructor(...args) {\n        super(...args);\n\n        this.inject('settings');\n        this.inject('chat');\n        this.inject('chat.emotes');\n        this.inject('chat.badges');\n        this.inject('site');\n\n        this.settings.add('ffzap.betterttv.global_emoticons', {\n            default: true,\n\n            ui: {\n                path: 'Add-Ons > FFZ:AP > BetterTTV >> Emotes',\n                title: 'Global Emotes',\n                description: 'Enable to show global BetterTTV emoticons.',\n                component: 'setting-check-box',\n            },\n        });\n\n        this.settings.add('ffzap.betterttv.override_emoticons', {\n            default: false,\n\n            ui: {\n                path: 'Add-Ons > FFZ:AP > BetterTTV >> Emotes',\n                title: 'Override Emotes',\n                description: 'Enable to show override emoticons (like D:).',\n                component: 'setting-check-box',\n            },\n        });\n\n        this.settings.add('ffzap.betterttv.channel_emoticons', {\n            default: true,\n\n            ui: {\n                path: 'Add-Ons > FFZ:AP > BetterTTV >> Emotes',\n                title: 'Channel Emotes',\n                description: 'Enable to show per-channel BetterTTV emoticons.',\n                component: 'setting-check-box',\n            },\n        });\n\n        this.settings.add('ffzap.betterttv.gif_emoticons_mode', {\n            default: 1,\n\n            ui: {\n                path: 'Add-Ons > FFZ:AP > BetterTTV >> Emotes',\n                title: 'GIF Emotes',\n                description: 'Change the mode of how GIF emoticons are showing up.',\n                component: 'setting-select-box',\n                data: [\n                    { value: 0, title: 'Disabled' },\n                    { value: 1, title: 'Enabled (Static GIF Emotes)' },\n                    { value: 2, title: 'Enabled (Animated GIF Emotes)' },\n                ],\n            },\n        });\n\n        this.settings.add('ffzap.betterttv.pro_emoticons', {\n            default: true,\n\n            ui: {\n                path: 'Add-Ons > FFZ:AP > BetterTTV >> Emotes',\n                title: 'Pro Emotes',\n                description: 'Enable to show BetterTTV Pro emoticons.',\n                component: 'setting-check-box',\n            },\n        });\n\n        this.chat.context.on('changed:ffzap.betterttv.global_emoticons', this.updateEmotes, this);\n        this.chat.context.on('changed:ffzap.betterttv.override_emoticons', this.updateEmotes, this);\n        this.chat.context.on('changed:ffzap.betterttv.channel_emoticons', this.updateEmotes, this);\n        this.chat.context.on('changed:ffzap.betterttv.gif_emoticons_mode', this.updateEmotes, this);\n        this.chat.context.on('changed:ffzap.betterttv.pro_emoticons', () => {\n            if (this.chat.context.get('ffzap.betterttv.pro_emoticons')) {\n                this.socket.connect();\n\n                for (const room of this.chat.iterateRooms()) {\n                    if (room) this.updateChannel(room);\n                }\n            } else {\n                for (const key in this.ProUsers) {\n                    if ({}.hasOwnProperty.call(this.ProUsers, key)) {\n                        this.ProUsers[key].unload();\n                    }\n                }\n                this.ProUsers = {};\n\n                this.socket.disconnectInternal();\n            }\t\n        }, this);\n\n        this.pro_users = {};\n        this.night_subs = {};\n        this.socket = false;\n\n        this.override_emotes = [\n            ':\\'(',\n            'D:',\n        ];\n    }\n\n    onEnable() {\n        this.log.debug('FFZ:AP\\'s BetterTTV module was enabled successfully.');\n\n        this.on('chat:room-add', this.roomAdd);\n        this.on('chat:room-remove', this.roomRemove);\n\n        this.addBadges();\n\n        this.socket = new Socket(this, this.getSocketEvents());\n        this.updateGlobalEmotes();\n\n        if (this.chat.context.get('ffzap.betterttv.pro_emoticons')) {\n            this.socket.connect();\n        }\n\n        for (const room of this.chat.iterateRooms()) {\n            if (room) this.updateChannel(room);\n        }\n\n        this.hookBTTVSettingChange();\n    }\n\n    roomAdd(room) {\n        this.updateChannel(room);\n    }\n\n    roomRemove(room) {\n        this.updateChannel(room);\n\n        if (this.chat.context.get('ffzap.betterttv.pro_emoticons')) {\n            this.socket.partChannel(room.id);\n        }\n    }\n\n    getSocketEvents() {\n        return {\n            lookup_user: subscription => {\n                if (!subscription.pro || !this.chat.context.get('ffzap.betterttv.pro_emoticons')) {\n                    return;\n                }\n\n                if (subscription.pro && subscription.emotes) {\n                    if (this.pro_users[subscription.name]) {\n                        this.pro_users[subscription.name].emotes_array = subscription.emotes;\n                        this.pro_users[subscription.name].loadEmotes();\n                    } else {\n                        this.pro_users[subscription.name] = new ProUser(this, subscription.name, subscription.emotes);\n                    }\n                }\n\n                if (subscription.subscribed) { // Night's subs\n                    if (!(this.night_subs[subscription.name])) {\n                        this.night_subs[subscription.name] = true;\n                        this.chat.getUser(undefined, subscription.name).addSet('addon--ffzap.betterttv', 'addon--ffzap.betterttv--emotes-special-night');\n                    }\n                }\n            },\n        };\n    }\n\n    hookBTTVSettingChange(newAttempts = 0) {\n        if (window.BetterTTV) {\n            window.BetterTTV.settings.on('changed.bttvGIFEmotes', () => this.updateEmotes());\n        }\n        else {\n            setTimeout(this.hookBTTVSettingChange.bind(this, newAttempts), 1000);\n        }\n    }\n\n    getAnimatedEmoteMode() {\n        let emoteMode = this.chat.context.get('ffzap.betterttv.gif_emoticons_mode');\n        if (window.BetterTTV && window.BetterTTV.settings.get('bttvGIFEmotes') && emoteMode !== GIF_EMOTES_MODE.DISABLED) {\n            emoteMode = GIF_EMOTES_MODE.ANIMATED;\n        }\n\n        return emoteMode;\n    }\n\n    async addBadges(attempts = 0) {\n        const response = await fetch('https://api.betterttv.net/2/badges');\n        if (response.ok) {\n            const data = await response.json();\n\n            const types = [];\n            const _types = data.types;\n            const _users = data.badges;\n\n            let i = _types.length;\n            while (i--) {\n                const _type = _types[i];\n\n                const badgeData = {\n                    id: `bttv-${_type.name}`,\n                    slot: 21,\n                    image: _type.svg,\n                    svg: true,\n                    title: _type.description,\n                    no_invert: true,\n                };\n\n                types[_type.name] = true;\n\n                this.badges.loadBadgeData(`addon--ffzap.betterttv--badges-bttv-${_type.name}`, badgeData);\n            }\n\n            i = _users.length;\n            while (i--) {\n                const _user = _users[i];\n\n                if (types[_user.type]) {\n                    this.log.debug(`Adding badge \"${_user.type}\" for user \"${_user.name}\".`);\n                    this.chat.getUser(undefined, _user.name).addBadge('addon--ffzap.betterttv', `addon--ffzap.betterttv--badges-bttv-${_user.type}`);\n                }\n            }\n        } else {\n            if (response.status === 404) return;\n\n            const newAttempts = (attempts || 0) + 1;\n            if (newAttempts < 12) {\n                this.log.error('Failed to fetch badges. Trying again in 5 seconds.');\n                setTimeout(this.addBadges.bind(this, newAttempts), 5000);\n            }\n        }\n    }\n\n    async updateGlobalEmotes(attempts = 0) {\n        const realID = 'addon--ffzap.betterttv--emotes-global';\n        this.emotes.removeDefaultSet('addon--ffzap.betterttv', realID);\n        this.emotes.unloadSet(realID);\n\n        if (!this.chat.context.get('ffzap.betterttv.global_emoticons')) {\n            return;\n        }\n\n        const response = await fetch('https://api.betterttv.net/2/emotes');\n        if (response.ok) {\n            const data = await response.json();\n\n            const globalBttv = [];\n            const overrideEmotes = [];\n            const nightSubEmotes = [];\n\n            const { emotes, urlTemplate } = data;\n\n            let i = emotes.length;\n            while (i--) {\n                const dataEmote = emotes[i];\n\n                const requireSpaces = /[^A-Za-z0-9]/.test(dataEmote.regex);\n\n                const emote = {\n                    id: dataEmote.id,\n                    urls: {\n                        1: dataEmote.url,\n                    },\n                    name: dataEmote.code,\n                    width: dataEmote.width,\n                    height: dataEmote.height,\n                    require_spaces: requireSpaces,\n                };\n\n                const emoteTemplate = `https:${urlTemplate.replace('{{id}}', emote.id)}`;\n                emote.urls = {\n                    1: emoteTemplate.replace('{{image}}', '1x'),\n                    2: emoteTemplate.replace('{{image}}', '2x'),\n                    4: emoteTemplate.replace('{{image}}', '3x'),\n                };\n\n                if (this.override_emotes.indexOf(emote.name) !== -1) {\n                    overrideEmotes.push(emote);\n                } else {\n                    if (dataEmote.imageType === 'gif') { // If the emote is a GIF\n                        if (this.getAnimatedEmoteMode() === GIF_EMOTES_MODE.DISABLED) {\n                            // If the GIF setting is set to \"Disabled\", ignore it.\n                            continue;\n                        } else if (this.getAnimatedEmoteMode() === GIF_EMOTES_MODE.STATIC) {\n                            // If the GIF setting is set to \"Static\", route them through the cache.\n                            emote.urls[1] = `https://cache.ffzap.com/${emote.urls[1]}`;\n                            emote.urls[2] = `https://cache.ffzap.com/${emote.urls[2]}`;\n                            emote.urls[4] = `https://cache.ffzap.com/${emote.urls[4]}`;\n                        }\n                    }\n\n                    if (dataEmote.restrictions && dataEmote.restrictions.emoticonSet === 'night') {\n                        nightSubEmotes.push(emote);\n                    } else {\n                        globalBttv.push(emote);\n                    }\n                }\n            }\n\t\t\t\n            let set;\n            if (nightSubEmotes.length > 0) {\n                set = {\n                    emoticons: nightSubEmotes,\n                    title: 'Night (Legacy)',\n                    source: 'BetterTTV',\n                    icon: 'https://cdn.betterttv.net/tags/developer.png',\n                    sort: 50,\n                };\n\t\t\n                this.emotes.loadSetData('addon--ffzap.betterttv--emotes-special-night', set);\n            }\n\n            let setEmotes = [];\n            setEmotes = setEmotes.concat(globalBttv);\n\n            if (this.chat.context.get('ffzap.betterttv.override_emoticons')) {\n                setEmotes = setEmotes.concat(overrideEmotes);\n            }\n\n            if (setEmotes.length === 0) {\n                return;\n            }\n\n            set = {\n                emoticons: setEmotes,\n                title: 'Global Emotes',\n                source: 'BetterTTV',\n                icon: 'https://cdn.betterttv.net/tags/developer.png',\n                _type: 1,\n            };\n\n            this.emotes.addDefaultSet('addon--ffzap.betterttv', realID, set);\n        } else {\n            if (response.status === 404) return;\n\n            const newAttempts = (attempts || 0) + 1;\n            if (newAttempts < 12) {\n                this.log.error('Failed to fetch global emotes. Trying again in 5 seconds.');\n                setTimeout(this.updateGlobalEmotes.bind(this, newAttempts), 5000);\n            }\n        }\n    }\n\n    async updateChannel(room, attempts = 0) {\n        const realID = `addon--ffzap.betterttv--channel-${room.id}`;\n        room.removeSet('addon--ffzap.betterttv', realID);\n        this.emotes.unloadSet(realID);\n\n        if (this.chat.context.get('ffzap.betterttv.pro_emoticons')) {\n            this.socket.joinChannel(room.login);\n        }\n\n        if (!this.chat.context.get('ffzap.betterttv.channel_emoticons')) {\n            return;\n        }\n\n        const response = await fetch(`https://api.betterttv.net/2/channels/${room.login}`);\n        if (response.ok) {\n            const channelBttv = [];\n            const { emotes, bots } = await response.json();\n\n            for (const bot of bots) {\n                room.getUser(null, bot).addBadge('ffz', 2);\n            }\n\n            let i = emotes.length;\n            while (i--) {\n                const requireSpaces = /[^A-Za-z0-9]/.test(emotes[i].code);\n\n                const emoteFromArray = emotes[i];\n                const { id } = emoteFromArray;\n\n                const emote = {\n                    urls: {\n                        1: `https://cdn.betterttv.net/emote/${id}/1x`,\n                        2: `https://cdn.betterttv.net/emote/${id}/2x`,\n                        4: `https://cdn.betterttv.net/emote/${id}/3x`,\n                    },\n                    id,\n                    name: emoteFromArray.code,\n                    width: 28,\n                    height: 28,\n                    owner: {\n                        display_name: emoteFromArray.channel || room.id,\n                        name: emoteFromArray.channel,\n                    },\n                    require_spaces: requireSpaces,\n                };\n\n                if (emoteFromArray.imageType === 'gif') {\n                    switch (this.getAnimatedEmoteMode()) {\n                    case GIF_EMOTES_MODE.DISABLED:\n                        break;\n\n                    case GIF_EMOTES_MODE.STATIC:\n                        emote.urls[1] = `https://cache.ffzap.com/${emote.urls[1]}`;\n                        emote.urls[2] = `https://cache.ffzap.com/${emote.urls[2]}`;\n                        emote.urls[4] = `https://cache.ffzap.com/${emote.urls[4]}`;\n\n                        channelBttv.push(emote);\n                        break;\n\n                    case GIF_EMOTES_MODE.ANIMATED:\n                        channelBttv.push(emote);\n                        break;\n\n                    default:\n                        channelBttv.push(emote);\n                        break;\n                    }\n                } else {\n                    channelBttv.push(emote);\n                }\n            }\n\n            if (!channelBttv.length) {\n                return;\n            }\n\n            const set = {\n                emoticons: channelBttv,\n                title: 'Channel Emotes',\n                source: 'BetterTTV',\n                icon: 'https://cdn.betterttv.net/tags/developer.png',\n                _type: 1,\n            };\n\n            if (channelBttv.length) {\n                room.addSet('addon--ffzap.betterttv', realID, set);\n            }\n        } else {\n            if (response.status === 404) return;\n\n            const newAttempts = (attempts || 0) + 1;\n            if (newAttempts < 12) {\n                this.log.error('Failed to fetch channel emotes. Trying again in 5 seconds.');\n                setTimeout(this.updateChannel.bind(this, room, newAttempts), 5000);\n            }\n        }\n    }\n\n    updateEmotes() {\n        this.updateGlobalEmotes();\n\n        for (const room of this.chat.iterateRooms()) {\n            if (room) this.updateChannel(room);\n        }\n    }\n}\n\nFrankerFaceZ.get().register('addon.ffzap.betterttv', BetterTTV).enable();\n","export default class Socket {\n    constructor(parent, events) {\n        this.parent = parent;\n\n        this.socket = false;\n        this._looked_up_users = [];\n        this._connected = false;\n        this._connecting = false;\n        this._connect_attempts = 1;\n        this._joined_channels = [];\n        this._connection_buffer = [];\n        this._events = events;\n    }\n\n    connect() {\n        if (!this.parent.site.getUser()) {\n            return;\n        }\n\n        if (this._connected || this._connecting) {\n            return;\n        }\n        this._connecting = true;\n\n        this.parent.log.info('Socket: Connecting to socket server...');\n\n        this.socket = new WebSocket('wss://sockets.betterttv.net/ws');\n\n        this.socket.onopen = () => {\n            this.parent.log.info('Socket: Connected to socket server.');\n\n            this._connected = true;\n            this._connect_attempts = 1;\n\n            if (this._connection_buffer.length > 0) {\n                let i = this._connection_buffer.length;\n                while (i--) {\n                    const channel = this._connection_buffer[i];\n                    this.joinChannel(channel);\n                    this.broadcastMe(channel);\n                }\n                this._connection_buffer = [];\n            }\n\n            if (this.reconnecting) {\n                this.reconnecting = false;\n                // api.iterate_rooms();\n            }\n        };\n\n        this.socket.onerror = () => {\n            this.parent.log.error('Socket: Error from socket server.');\n\n            this._connect_attempts++;\n            this.reconnect();\n        };\n\n        this.socket.onclose = () => {\n            if (!this._connected || !this.socket) {\n                return;\n            }\n\n            this.parent.log.info('Socket: Lost connection to socket server...');\n\n            this._connect_attempts++;\n            this.reconnect();\n        };\n\n        this.socket.onmessage = message => {\n            let evt;\n\n            try {\n                evt = JSON.parse(message.data);\n            } catch (e) {\n                this.parent.log.error('Socket: Error parsing message', e);\n            }\n\n            if (!evt || !(this._events[evt.name])) {\n                return;\n            }\n\n            this.parent.log.debug('Socket: Received event', evt);\n\n            this._events[evt.name](evt.data);\n        };\n    }\n\n    reconnect() {\n        this.disconnect();\n\n        if (this._connecting === false) {\n            return;\n        }\n        this._connecting = false;\n\n        this.parent.log.info('Socket: Trying to reconnect to socket server...');\n\n        setTimeout(() => {\n            this.reconnecting = true;\n            this.connect();\n        }, Math.random() * (Math.pow(2, this._connect_attempts) - 1) * 10000);\n    }\n\n    disconnect() {\n        if (this.socket) {\n            try {\n                this.socket.close();\n            } catch (e) {\n                // Error\n            }\n        }\n\n        delete this.socket;\n\n        this._connected = false;\n        this._connecting = false;\n    }\n\n    disconnectInternal() {\n        this.disconnect();\n\n        this.parent.log.info('Socket: Disconnected from socket server.');\n    }\n\n    emit(event, data) {\n        if (!this._connected || !this.socket) {\n            return;\n        }\n\n        this.socket.send(JSON.stringify({\n            name: event,\n            data,\n        }));\n    }\n\n    broadcastMe(channel) {\n        if (!this._connected) {\n            return;\n        }\n        if (!this.parent.site.getUser()) {\n            return;\n        }\n\n        this.emit('broadcast_me', {\n            name: this.parent.site.getUser().login,\n            channel,\n        });\n    }\n\n    joinChannel(channel) {\n        if (!this._connected) {\n            if (!this._connection_buffer.includes(channel)) {\n                this._connection_buffer.push(channel);\n            }\n            return;\n        }\n\n        if (!channel || !channel.length) {\n            return;\n        }\n\n        if (this._joined_channels[channel]) {\n            this.partChannel(channel);\n        }\n\n        this.emit('join_channel', {\n            name: channel,\n        });\n        this._joined_channels[channel] = true;\n    }\n\n    partChannel(channel) {\n        if (!this._connected) {\n            return;\n        }\n        if (!channel.length) {\n            return;\n        }\n\n        if (this._joined_channels[channel]) {\n            this.emit('part_channel', {\n                name: channel,\n            });\n        }\n        this._joined_channels[channel] = false;\n    }\n}\n","export default class ProUser {\n    constructor(parent, username, emotesArray) {\n        this.parent = parent;\n\n        this.username = username;\n        this.emotesArray = emotesArray;\n\n        this.initialize();\n    }\n\n    initialize() {\n        this._id_emotes = `addon--ffzap.betterttv--emotes-pro-${this.username}`;\n\n        this.loadEmotes();\n    }\n\n    loadEmotes() {\n        this.emotes = [];\n\n        for (let i = 0; i < this.emotesArray.length; i++) {\n            const _emote = this.emotesArray[i];\n            const emote = {\n                urls: {\n                    1: `https://cdn.betterttv.net/emote/${_emote.id}/1x`,\n                    2: `https://cdn.betterttv.net/emote/${_emote.id}/2x`,\n                    4: `https://cdn.betterttv.net/emote/${_emote.id}/3x`,\n                },\n                id: _emote.id,\n                name: _emote.code,\n                width: 28,\n                height: 28,\n                owner: {\n                    display_name: _emote.channel || '',\n                    name: _emote.channel || '',\n                },\n                require_spaces: true,\n            };\n\n            if (_emote.imageType === 'gif') {\n                if (this.parent.getAnimatedEmoteMode() === this.parent.GIF_EMOTES_MODE.DISABLED) { // If the GIF setting is set to \"Disabled\", ignore it.\n                    continue;\n                } else if (this.parent.getAnimatedEmoteMode() === this.parent.GIF_EMOTES_MODE.STATIC) { // If the GIF setting is set to \"Static\", route them through the cache.\n                    emote.urls[1] = `https://cache.ffzap.com/${emote.urls[1]}`;\n                    emote.urls[2] = `https://cache.ffzap.com/${emote.urls[2]}`;\n                    emote.urls[4] = `https://cache.ffzap.com/${emote.urls[4]}`;\n                }\n            }\n            this.emotes.push(emote);\n        }\n\n        const set = {\n            emoticons: this.emotes,\n            title: 'Personal Emotes',\n            source: 'BetterTTV',\n            icon: 'https://cdn.betterttv.net/tags/developer.png',\n        };\n\n        if (this.emotes.length) {\n            this.parent.emotes.loadSetData(this._id_emotes, set, true);\n            this.parent.chat.getUser(undefined, this.username).addSet('addon--ffzap.betterttv', this._id_emotes);\n        } else {\n            this.parent.emotes.unloadSet(this._id_emotes);\n        }\n    }\n\n    unload() {\n        this.parent.emotes.unloadSet(this._id_emotes);\n    }\n}\n","export default class Sub {\n    constructor(parent, username, emoteIds, badge) {\n        this.parent = parent;\n\n        this.username = username;\n        this.emote_ids = emoteIds;\n        this.badges = [];\n        if (badge) {\n            this.addUserBadge(badge);\n        }\n\n        this.initialize();\n    }\n\n    initialize() {\n        this._id_emotes = `addon--ffzap.gamewisp--emotes-sub-${this.username}`;\n\n        this.loadEmotes();\n        this.reloadBadges();\n    }\n\n    addUserBadge(badgeId) {\n        this.badges.push(badgeId);\n    }\n\n    loadEmotes() {\n        this.emotes = {};\n        this.channels = [];\n\n        if (!this.emote_ids) {\n            return;\n        }\n\n        for (let i = 0; i < this.emote_ids.length; i++) {\n            const emote = this.parent.getEmote(this.emote_ids[i]);\n            if (emote) {\n                if (!this.emotes[emote.gw_channel]) {\n                    this.emotes[emote.gw_channel] = [];\n                }\n                this.emotes[emote.gw_channel].push(emote);\n            }\n        }\n\n        if (!this.parent.chat.context.get('ffzap.gamewisp.sub_emoticons')) {\n            return;\n        }\n\n        for (const i in this.emotes) {\n            if (this.emotes.hasOwnProperty(i)) {\n                const emotes = this.emotes[i];\n\n                if (!this._emote_sets) {\n                    this._emote_sets = [];\n                }\n\n                this._emote_sets[i] = {\n                    emoticons: emotes,\n                    title: i,\n                    source: 'GameWisp',\n                    icon: 'https://cdn.ffzap.com/gamewisp/icon_16x.png',\n                    sort: 50,\n                    has_prefix: 2,\n                    _set_name: `${this._id_emotes}-${i}`,\n                };\n\n                if (emotes.length) {\n                    this.parent.emotes.loadSetData(this._emote_sets[i]._set_name, this._emote_sets[i], true);\n                    this.parent.chat.getUser(undefined, this.username).addSet('addon--ffzap.gamewisp', this._emote_sets[i]._set_name);\n                } else {\n                    this.parent.emotes.unloadSet(this._emote_sets[i]._set_name);\n                }\n            }\n        }\n    }\n\n    reloadBadges() {\n        if (!this.badges || this.badges.length === 0) {\n            return;\n        }\n\n        for (let i = 0; i < this.badges.length; i++) {\n            const id = this.badges[i];\n            const badge = this.parent.getBadge(id);\n            if (!badge) {\n                continue;\n            }\n\t\t\t\n            const room = this.parent.chat.getRoom(undefined, badge.twitch_channel, true);\n            if (!room) {\n                continue;\n            }\n\n            room.getUser(undefined, this.username)\n                .removeBadge('addon--ffzap.gamewisp', 'addon--ffzap.gamewisp--badges-subscriber');\n\t\t\t\n            if (this.parent.chat.context.get('ffzap.gamewisp.sub_badges')) {\n                room.getUser(undefined, this.username)\n                    .addBadge('addon--ffzap.gamewisp', 'addon--ffzap.gamewisp--badges-subscriber', badge.ffz_data);\n\t\t\t\t\n                if (this._emote_sets && this._emote_sets[badge.gw_channel]) {\n                    const emote_set = this._emote_sets[badge.gw_channel];\n                    emote_set.icon = badge.ffz_data.image;\n                    if (emote_set.emoticons && emote_set.emoticons.length > 0) {\n                        this.parent.emotes.loadSetData(emote_set._set_name, emote_set);\n                    }\n                }\n            }\n        }\n    }\n\n    unload() {\n        for (let i = 0; i < this.channels.length; i++) {\n            const room = this.parent.chat.getRoom(undefined, this.channels[i], true);\n            if (!room) {\n                continue;\n            }\n\n            room.getUser(undefined, this.username)\n                .removeBadge('addon--ffzap.gamewisp', 'addon--ffzap.gamewisp--badges-subscriber');\n        }\n    }\n}","/* global FrankerFaceZ, fetch */\n\nimport Socket from './socket';\nimport Sub from './sub';\n\nclass GameWisp extends FrankerFaceZ.utilities.module.Module {\n    constructor(...args) {\n        super(...args);\n\n        this.inject('settings');\n        this.inject('chat');\n        this.inject('chat.emotes');\n        this.inject('chat.badges');\n        this.inject('site');\n\n        this.settings.add('ffzap.gamewisp.global_emoticons', {\n            default: true,\n\n            ui: {\n                path: 'Add-Ons > FFZ:AP > GameWisp >> Emotes',\n                title: 'Global Emotes',\n                description: 'Enable to show global GameWisp emoticons.',\n                component: 'setting-check-box',\n            },\n        });\n\n        this.settings.add('ffzap.gamewisp.sub_emoticons', {\n            default: true,\n\n            ui: {\n                path: 'Add-Ons > FFZ:AP > GameWisp >> Emotes',\n                title: 'Subscriber Emotes',\n                description: 'Enable to show GameWisp subscriber emoticons.',\n                component: 'setting-check-box',\n            },\n        });\n\n        this.settings.add('ffzap.gamewisp.sub_badges', {\n            default: true,\n\n            ui: {\n                path: 'Add-Ons > FFZ:AP > GameWisp >> Badges',\n                title: 'Subscriber Badges',\n                description: 'Enable to show GameWisp subscriber badges.',\n                component: 'setting-check-box',\n            },\n        });\n\n        this.settings.add('ffzap.gamewisp.badges_override_twitch', {\n            default: true,\n\n            ui: {\n                path: 'Add-Ons > FFZ:AP > GameWisp >> Badges',\n                title: 'Subscriber Badges Override Twitch Badges',\n                description: 'Enable to let GameWisp subscriber badges override the Twitch subscriber badges.',\n                component: 'setting-check-box',\n            },\n\n            changed: enabled => {\n                if (this.chat.context.get('ffzap.gamewisp.sub_badges')) {\n                    for (const badge in this.sub_badges) {\n                        if ({}.hasOwnProperty.call(this.sub_badges, badge)) {\n                            const _badge = this.sub_badges[badge];\n                            _badge.ffz_data.replaces = enabled ? 'subscriber' : undefined;\n                            _badge.ffz_data.slot = enabled ? 25 : 26;\n                        }\n                    }\n\n                    for (const username in this.subs) {\n                        if ({}.hasOwnProperty.call(this.subs, username)) {\n                            this.subs[username].reloadBadges();\n                        }\n                    }\n                }\t\n            },\n        });\n\n        this.chat.context.on('changed:ffzap.gamewisp.global_emoticons', this.updateGlobalEmotes, this);\n        this.chat.context.on('changed:ffzap.gamewisp.sub_emoticons', enabled => {\n            if (enabled) {\n                this.socket.connect();\n\t\t\t\t\n                for (const room of this.chat.iterateRooms()) {\n                    if (room) this.roomAdd(room);\n                }\n            } else {\n                for (const username in this.subs) {\n                    if ({}.hasOwnProperty.call(this.subs, username)) {\n                        this.subs[username].unload();\n                    }\n                }\n                this.subs = {};\n            }\n        }, this);\n        this.chat.context.on('changed:ffzap.gamewisp.sub_badges', enabled => {\n            if (enabled) {\n                this.socket.connect();\n\n                for (const username in this.subs) {\n                    if ({}.hasOwnProperty.call(this.subs, username)) {\n                        this.subs[username].reloadBadges();\n                    }\n                }\n            }\n        }, this);\n        this.chat.context.on('changed:ffzap.gamewisp.badges_override_twitch', enabled => {\n            if (this.chat.context.get('ffzap.gamewisp.sub_badges')) {\n                for (const badge in this.sub_badges) {\n                    if ({}.hasOwnProperty.call(this.sub_badges, badge)) {\n                        const _badge = this.sub_badges[badge];\n                        _badge.ffz_data.replaces = enabled ? 'subscriber' : undefined;\n                        _badge.ffz_data.slot = enabled ? 25 : 26;\n                    }\n                }\n\n                for (const username in this.subs) {\n                    if ({}.hasOwnProperty.call(this.subs, username)) {\n                        this.subs[username].reloadBadges();\n                    }\n                }\n            }\t\n        }, this);\n\n        // this.settings.add('ffzap.gamewisp.sub_button', {\n        // \tdefault: true,\n\n        // \tui: {\n        // \t\tpath: 'Add-Ons > FFZ:AP > GameWisp >> Metadata',\n        // \t\ttitle: 'Subscribe Button',\n        // \t\tdescription: 'Enable to show a GameWisp sub button underneath the stream.',\n        // \t\tcomponent: 'setting-check-box',\n        // \t},\n\n        // \tchanged: () => this.updateMetadata(),\n        // });\n\n\n        this.socket = false;\n        this.sub_emotes = {};\n        this.sub_badges = {};\n        this.channels = [];\n        this.subbed_to = {};\n        this.subs = {};\n    }\n\n    onLoad() { // eslint-disable-line class-methods-use-this\n        const msgpack = document.createElement('script');\n        msgpack.type = 'text/javascript';\n        msgpack.src = 'https://cdnjs.cloudflare.com/ajax/libs/msgpack-lite/0.1.26/msgpack.min.js';\n        document.head.appendChild(msgpack);\n    }\n\n    onEnable() {\n        this.log.debug('FFZ:AP\\'s GameWisp module was enabled successfully.');\n\n        this.on('chat:room-add', this.roomAdd);\n        this.on('chat:room-remove', this.roomRemove);\n\n        this.socket = new Socket(this, this.getSocketEvents());\n        this.updateGlobalEmotes();\n\n        if (this.chat.context.get('ffzap.gamewisp.sub_emoticons') || this.chat.context.get('ffzap.gamewisp.sub_badges')) {\n            this.socket.connect();\n        }\n\n        this.badges.loadBadgeData('addon--ffzap.gamewisp--badges-subscriber', {\n            id: 'gamewisp-subscriber',\n            title: 'GameWisp Subscriber',\n            image: 'https://cdn.ffzap.com/gamewisp/icon_16x.png',\n            no_invert: true,\n        });\n\n        for (const room of this.chat.iterateRooms()) {\n            if (room) this.roomAdd(room);\n        }\n\n        // Sub Button - currently disabled\n        /*\n\n\t\tlet metadata = {\n\t\t\tsubscribe: {\n\t\t\t\trefresh: false,\n\t\t\t\torder: 97,\n\t\t\t\thost_order: 49,\n\t\t\t\tbutton: true,\n\n\t\t\t\tstatic_label: '<img src=\"https://cdn.lordmau5.com/ffz-ap/gamewisp/icon_16x.png\"/>',\n\t\t\t\tlabel: (view, channel, isHosting) => {\n\t\t\t\tif (!this.isEnabled() || !this.enable_sub_button) {\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\n\t\t\t\tlet label = '';\n\t\t\t\tlet id = channel.get('id');\n\t\t\t\tif (this.subbed_to[id]) {\n\t\t\t\t\tlabel = this.subbed_to[id].subbed ? 'Visit Channel' : 'Subscribe';\n\n\t\t\t\t\tif (ffz.get_user() && ffz.get_user().login === id) {\n\t\t\t\t\tlabel = 'Visit Channel';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn label;\n\t\t\t\t},\n\n\t\t\t\tdisabled: (view, channel, isHosting) => {\n\t\t\t\tif (!this.isEnabled() || !this.enable_sub_button) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// TODO: Disable when tiers get published to the socket and user is on highest tier?\n\n\t\t\t\t// var id = channel.get('id');\n\t\t\t\t// return GameWisp.vars.subbed_to[id];\n\t\t\t\treturn !this.isEnabled() || !this.enable_sub_button;\n\t\t\t\t},\n\n\t\t\t\tclick: (event, button, view, channel, isHosting) => {\n\t\t\t\tif (!this.isEnabled()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet id = channel.get('id');\n\t\t\t\tif (this.subbed_to[id]) {\n\t\t\t\t\twindow.open(this.subbed_to[id].gwData.url, '_blank');\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t};\n\t\t\tapi.register_metadata('gamewisp-subscribe', metadata.subscribe);\n\n\t\t\tapi.add_badge('gamewisp-subscriber', {\n\t\t\tname: 'gw-sub',\n\t\t\ttitle: 'GameWisp Subscriber',\n\t\t\timage: 'https://cdn.lordmau5.com/ffz-ap/gamewisp/icon_16x.png',\n\t\t\tno_invert: true\n\t\t\t});\n\t\t}\n\n\t\t*/\n    }\n\n    roomAdd(room) {\n        this.socket.joinRoom(room.login);\n    }\n\n    roomRemove(room) {\n        const index = this.channels.indexOf(room.login);\n        if (index !== -1) {\n            this.channels.splice(index);\n        }\n\n        if (this.subbed_to[room.login]) {\n            this.subbed_to[room.login] = null;\n        }\n\n        this.socket.leaveRoom(room.login);\n    }\n\n    async updateGlobalEmotes(attempts = 0) {\n        const realID = 'addon--ffzap.gamewisp--emotes-global';\n        this.emotes.removeDefaultSet('addon--ffzap.gamewisp', realID);\n        this.emotes.unloadSet(realID);\n\n        if (!this.chat.context.get('ffzap.gamewisp.global_emoticons')) {\n            return;\n        }\n\n        const response = await fetch('https://api.gamewisp.com/pub/v1/emote/global');\n        if (response.ok) {\n            const json = await response.json();\n\t\t\t\n            const globalEmotes = [];\n\n            const emotes = json.data;\n            for (let i = 0; i < emotes.length; i++) {\n                const _emote = emotes[i];\n\t\t\n                const emote = {\n                    urls: {\n                        1: _emote.image_asset.data.content.small,\n                        2: _emote.image_asset.data.content.medium,\n                        4: _emote.image_asset.data.content.large,\n                    },\n                    name: _emote.shortcode,\n                    id: _emote.image_asset.data.id,\n                    width: 28,\n                    height: 28,\n                    require_spaces: true,\n                };\n\t\t\n                globalEmotes.push(emote);\n            }\n\t\t\n            const set = {\n                emoticons: globalEmotes,\n                title: 'Global Emotes',\n                source: 'GameWisp',\n                icon: 'https://cdn.ffzap.com/gamewisp/icon_16x.png',\n                sort: 101,\n                _type: 1,\n            };\n            this.emotes.addDefaultSet('addon--ffzap.gamewisp', realID, set);\n        } else {\n            if (response.status === 404) return;\n\n            const newAttempts = (attempts || 0) + 1;\n            if (newAttempts < 12) {\n                this.log.error('Failed to fetch global emotes. Trying again in 5 seconds.');\n                setTimeout(this.updateGlobalEmotes.bind(this, newAttempts), 5000);\n            }\n        }\n    }\n\n    addEmote(id, code, channel, gwChannel, url) {\n        if (this.sub_emotes[id]) {\n            return this.sub_emotes[id];\n        }\n\n        const baseUrl = url.replace(/_(\\d*)x(\\d*)\\.png/, '');\n        this.sub_emotes[id] = {\n            urls: {\n                1: url,\n                2: `${baseUrl}_56x56.png`,\n                4: `${baseUrl}_112x112.png`,\n            },\n            name: code,\n            width: 28,\n            height: 28,\n            require_spaces: false,\n            gw_channel: gwChannel,\n            id: `${channel}-${code}`,\n        };\n\n        return this.sub_emotes[id];\n    }\n\n    getEmote(id) {\t\n        return this.sub_emotes[id] || false;\n    }\n\n    addBadge(id, twitchChannel, gwChannel, name, tier, url) {\t\n        if (this.sub_badges[id]) {\n            return this.sub_badges[id];\n        }\n\t\n        if (twitchChannel == null) {\n            this.log.debug('Tried to add a badge with an undefined twitch channel!', [id, twitchChannel, gwChannel, tier, url]);\n            return;\n        }\n\n        const baseUrl = url.replace(/_(\\d*)x(\\d*)\\.png/, '');\n        this.sub_badges[id] = {\n            twitch_channel: twitchChannel,\n            gw_channel: gwChannel,\n            name,\n            tier,\n            ffz_data: {\n                id: 'gamewisp-subscriber',\n                image: url,\n                title: name,\n                slot: (this.chat.context.get('ffzap.gamewisp.badges_override_twitch') ? 25 : 26),\n                urls: {\n                    1: url,\n                    2: `${baseUrl}_36x36.png`,\n                    4: `${baseUrl}_72x72.png`,\n                },\n                replace_mode: 'keep_title',\n                replaces: (this.chat.context.get('ffzap.gamewisp.badges_override_twitch') ? 'subscriber' : undefined),\n            },\n        };\n\t\n        return this.sub_badges[id];\n    }\n\t\n    getBadge(id) {\t\n        return this.sub_badges[id] || false;\n    }\n\n    getSocketEvents() {\n        return {\n            initialize_room: data => {\n                if (data.gameWispChannel && data.gameWispChannel.isLaunched) {\n                    this.subbed_to[data.room] = {\n                        subbed: data.isGameWispSub,\n                        gwData: data.gameWispChannel,\n                    };\n                }\n\n                if (data.emotes) {\n                    for (let i = 0; i < data.emotes.length; i++) {\n                        const _emote = data.emotes[i];\n                        if (!_emote.name) {\n                            this.addEmote(_emote.id, _emote.code, _emote.twitch_channel, _emote.channel, _emote.url);\n                        }\n                    }\n                }\n\n                if (data.badges) {\n                    for (let i = 0; i < data.badges.length; i++) {\n                        const _badge = data.badges[i];\n\n                        // ID, Channel, Tier data, URL\n                        this.addBadge(_badge.id, _badge.twitch_channel, _badge.channel, _badge.name || _badge.code, _badge.tier, _badge.url);\n                    }\n                }\n\n                let users = data.userStore;\n\n                if (users) {\n                    for (const username in users) {\n                        if (users.hasOwnProperty(username)) {\n                            const _emoteIds = users[username];\n                            if (_emoteIds.length > 0) {\n                                if (this.subs[username]) {\n                                    this.subs[username].emote_ids = _emoteIds;\n                                    this.subs[username].loadEmotes();\n                                } else {\n                                    this.subs[username] = new Sub(this, username, _emoteIds, null);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                users = data.userStoreBadges;\n                if (users) {\n                    for (const username in users) {\n                        if (users.hasOwnProperty(username)) {\n                            const badge = users[username];\n                            if (this.subs[username]) {\n                                this.subs[username].addUserBadge(badge);\n                                this.subs[username].reloadBadges();\n                            } else {\n                                this.subs[username] = new Sub(this, username, null, badge);\n                            }\n                        }\n                    }\n                }\n\n                // api.update_metadata('gamewisp-subscribe');\n            },\n            update_room: data => {\n                if (data.emotes) {\n                    for (let i = 0; i < data.emotes.length; i++) {\n                        const _emote = data.emotes[i];\n                        if (!_emote.name) {\n                            this.addEmote(_emote.id, _emote.code, _emote.twitch_channel, _emote.channel, _emote.url);\n                        }\n                    }\n                }\n\n                const user = data.user;\n\n                if (user && user.emoteIDs && user.emoteIDs.length > 0) {\n                    const _emoteIds = user.emoteIDs;\n                    if (this.subs[user.name]) {\n                        this.subs[user.name].emote_ids = _emoteIds;\n                        this.subs[user.name].loadEmotes();\n                    } else {\n                        this.subs[user.name] = new Sub(this, user.name, _emoteIds, null);\n                    }\n                }\n            },\n            leave_room: () => {},\n        };\n    }\n}\n\nFrankerFaceZ.get().register('addon.ffzap.gamewisp', GameWisp).enable();\n","/* globals msgpack */\n\nexport default class Socket {\n    constructor(parent, events) {\n        this.parent = parent;\n\n        this.socket = false;\n        this._looked_up_users = [];\n        this._connected = false;\n        this._connecting = false;\n        this._connect_attempts = 1;\n        this._joined_channels = [];\n        this._connection_buffer = [];\n        this._events = events;\n    }\n\n    connect() {\n        if (!this.parent.site.getUser()) {\n            return;\n        }\n        if (this._connected || this._connecting) {\n            return;\n        }\n        this._connecting = true;\n\n        this.parent.log.info('Socket: Connecting to socket server...');\n\n        this.socket = new WebSocket('wss://emotes.gamewisp.com/');\n        this.socket.binaryType = 'arraybuffer';\n\n        this._joined_channels = [];\n\n        this.socket.onopen = () => {\n            this.parent.log.info('Socket: Connected to socket server.');\n\n            this._connected = true;\n            this._connect_attempts = 1;\n\n            if (this._connection_buffer.length > 0) {\n                let i = this._connection_buffer.length;\n                while (i--) {\n                    const channel = this._connection_buffer[i];\n                    this.joinRoom(channel);\n                }\n                this._connection_buffer = [];\n            }\n\n            if (this.reconnecting) {\n                this.reconnecting = false;\n            }\n        };\n\n        this.socket.onerror = () => {\n            this.parent.log.error('Socket: Error from socket server.');\n\n            if (this._connecting) {\n                this.reconnecting = false;\n            }\n\n            this._connect_attempts++;\n            this.reconnect();\n        };\n\n        this.socket.onclose = () => {\n            if (!this._connected || !this.socket) {\n                return;\n            }\n\n            this.parent.log.error('Socket: Lost connection to socket server...');\n\n            this._connect_attempts++;\n            this.reconnect();\n        };\n\n        this.socket.onmessage = message => {\n            message = msgpack.decode(new Uint8Array(message.data));\n            const evt = message.name;\n\n            if (!evt || !(this._events[evt])) {\n                return;\n            }\n\n            this._events[evt](message.data);\n        };\n    }\n\n    reconnect() {\n        this.disconnect();\n\n        if (this.reconnecting) {\n            return;\n        }\n        this.reconnecting = false;\n\n        this.parent.log.info('Socket: Trying to reconnect to socket server...');\n\n        setTimeout(() => {\n            this.reconnecting = true;\n            this.connect();\n        }, Math.random() * (Math.pow(2, this._connect_attempts) - 1) * 10000);\n    }\n\n    disconnect() {\n        if (this.socket) {\n            try {\n                this.socket.close();\n            } catch (e) {\n                // Error\n            }\n        }\n\n        delete this.socket;\n\n        this._connected = false;\n        this._connecting = false;\n    }\n\n    disconnectInternal() {\n        this.disconnect();\n\n        this.parent.log.info('Socket: Disconnected from socket server.');\n    }\n\n    emit(event, data) {\n        if (!this._connected || !this.socket) {\n            return;\n        }\n\n        this.socket.send(JSON.stringify({\n            name: event,\n            data,\n        }));\n    }\n\n    joinRoom(channel) {\n        if (!this.parent.chat.context.get('ffzap.gamewisp.sub_emoticons') && !this.parent.chat.context.get('ffzap.gamewisp.sub_badges')) {\n            return;\n        }\n\n        if (!this._connected) {\n            if (!this._connection_buffer.includes(channel)) {\n                this._connection_buffer.push(channel);\n            }\n            return;\n        }\n\n        if (!this.parent.site.getUser() || !this.parent.site.getUser().login) {\n            return;\n        }\n\n        if (!channel || !channel.length) {\n            return;\n        }\n\n        if (this._joined_channels[channel]) {\n            this.leaveRoom(channel);\n        }\n\n        this.emit('join_room', {\n            user: this.parent.site.getUser().login,\n            room: channel,\n            mode: ['emotes', 'badges'],\n            sub_data: true,\n        });\n        this._joined_channels[channel] = true;\n    }\n\n    leaveRoom(channel) {\n        if (!this._connected) {\n            return;\n        }\n        if (!channel.length) {\n            return;\n        }\n\n        if (this._joined_channels[channel]) {\n            this.emit('leave_room', {\n                user: this.parent.site.getUser().login,\n                name: channel,\n            });\n        }\n        this._joined_channels[channel] = false;\n    }\n}\n","require('./core/index');\nrequire('./betterttv/index');\nrequire('./gamewisp/index');\nrequire('./liriklive/index');\nrequire('./dxdt/index');\n// require('./maiwafu/index');\n","const REQUEST_TYPES = {\n    AUTHORIZE: 1 << 0, //not implemented here\n    PONG: 1 << 1, //should be the response to the PING evemt\n    CHANNEL_SUBSCRIBE: 1 << 2,\n    CHANNEL_UNSUBSCRIBE: 1 << 3,\n    ANNOUNCE_MESSAGE: 1 << 4,\n};\n\nconst EVENT_TYPES = {\n    READY: 1 << 0, //you should receive that from the server directly after connecting\n    AUTHORIZED: 1 << 1, //not implemeneted here\n    PING: 1 << 2, //just respond with PONG request type, not yet implemented but ima kick cons eventually via that\n    CHANNEL_SUBSCRIPTION_ADDED: 1 << 4,\n    CHANNEL_SUBSCRIPTION_REMOVED: 1 << 5,\n    USER_CHANNEL_DATA: 1 << 6,\n};\n\nconst USER_FLAGS = {\n    EXTENSION_DEV: 1 << 0,\n    EXTENSION_ADMIN: 1 << 1,\n    LIRIK_SUB: 1 << 2,\n};\n\nexport default class Socket {\n    constructor(parent) {\n        this.parent = parent;\n\n        this.socket = false;\n        this._connected = false;\n        this._connecting = false;\n        this._ready = false;\n        this._connect_attempts = 1;\n        this._joined_channels = [];\n        this._connection_buffer = [];\n    }\n\n    connect() {\n        if (!this.parent.site.getUser()) {\n            return;\n        }\n\n        if (this._connected || this._connecting) {\n            return;\n        }\n\n        this._connecting = true;\n\n        this.parent.log.info('Socket: Connecting to socket server...');\n\n        this.socket = new WebSocket('wss://lirik.hnlbot.com/ws');\n        this.socket.binaryType = 'arraybuffer';\n\n        this._joined_channels = [];\n\n        this.socket.onopen = () => {\n            this.parent.log.info('Socket: Connected to socket server.');\n\n            this._connected = true;\n            this._connect_attempts = 1;\n\n            if (this.reconnecting) {\n                for (const room of this.parent.chat.iterateRooms()) {\n                    if (room) this.parent.roomAdd(room);\n                }\n\n                this.reconnecting = false;\n            }\n        };\n\n        this.socket.onerror = () => {\n            this.parent.log.error('Socket: Error from socket server.');\n\n            if (this._connecting) {\n                this.reconnecting = false;\n            }\n\n            this._connect_attempts++;\n            this.reconnect();\n        };\n\n        this.socket.onclose = () => {\n            if (!this._connected || !this.socket) {\n                return;\n            }\n\n            this.parent.log.error('Socket: Lost connection to socket server...');\n\n            this._connect_attempts++;\n            this.reconnect();\n        };\n\n        this.socket.onmessage = message => {\n            let json = JSON.parse(message.data);\n            json = json instanceof Array ? json : [json];\n\n            for (const evt of json) {\n                switch(evt.t) {\n                case EVENT_TYPES.READY: {\n                    this._ready = true;\n\t\n                    if (this._connection_buffer.length > 0) {\n                        let i = this._connection_buffer.length;\n                        while (i--) {\n                            const channel = this._connection_buffer[i];\n                            this.joinRoom(channel);\n                        }\n                        this._connection_buffer = [];\n                    }\n                    break;\n                }\n\t\n                case EVENT_TYPES.PING: {\n                    this.emit(REQUEST_TYPES.PONG);\n                    break;\n                }\n\t\n                case EVENT_TYPES.CHANNEL_SUBSCRIPTION_ADDED: {\n                    if (!evt.c_d) continue;\n\n                    const {u_id, f: flags, s_m} = evt.c_d;\n\t\n                    if (flags & USER_FLAGS.LIRIK_SUB) {\n                        const user = this.parent.chat.getUser(u_id);\n                        user.addSet('addon--ffzap.liriklive', 'addon--ffzap.liriklive--emotes-subscriber');\n                        if (s_m >= 12) {\n                            user.addSet('addon--ffzap.liriklive', 'addon--ffzap.liriklive--emotes-restricted');\n                        }\n                    }\n\t\n                    break;\n                }\n\t\n                case EVENT_TYPES.USER_CHANNEL_DATA: {\n                    const {u_id, f: flags, s_m} = evt.d;\n\t\n                    if (flags & USER_FLAGS.LIRIK_SUB) {\n                        const user = this.parent.chat.getUser(u_id);\n                        user.addSet('addon--ffzap.liriklive', 'addon--ffzap.liriklive--emotes-subscriber');\n                        if (s_m >= 12) {\n                            user.addSet('addon--ffzap.liriklive', 'addon--ffzap.liriklive--emotes-restricted');\n                        }\n                    }\n                }\n                }\n            }\n        };\n    }\n\n    reconnect() {\n        this.disconnect();\n\n        if (this.reconnecting) {\n            return;\n        }\n        this.reconnecting = false;\n\n        this.parent.log.info('Socket: Trying to reconnect to socket server...');\n\n        setTimeout(() => {\n            this.reconnecting = true;\n            this.connect();\n        }, Math.random() * (Math.pow(2, this._connect_attempts) - 1) * 10000);\n    }\n\n    disconnect() {\n        if (this.socket) {\n            try {\n                this.socket.close();\n            } catch (e) {\n                // Error\n            }\n        }\n\n        delete this.socket;\n\n        this._connected = false;\n        this._connecting = false;\n    }\n\n    disconnectInternal() {\n        this.disconnect();\n\n        this.parent.log.info('Socket: Disconnected from socket server.');\n    }\n\n    emit(event_type, data) {\n        if (!this._connected || !this.socket) {\n            return;\n        }\n\n        this.socket.send(JSON.stringify({\n            t: event_type,\n            d: data,\n        }));\n    }\n\n    joinRoom(channel_id) {\n        if (!this.parent.chat.context.get('ffzap.liriklive.sub_emoticons')) {\n            return;\n        }\n\n        if (!channel_id) {\n            return;\n        }\n\n        if (!this._connected || !this._ready) {\n            if (!this._connection_buffer.includes(channel_id)) {\n                this._connection_buffer.push(channel_id);\n            }\n            return;\n        }\n\n        const user = this.parent.site.getUser();\n        if (!user || !user.id) {\n            return;\n        }\n\n        if (this._joined_channels[channel_id]) {\n            this.leaveRoom(channel_id);\n        }\n\n        this.emit(REQUEST_TYPES.CHANNEL_SUBSCRIBE, {\n            u_id: user.id,\n            c_id: channel_id,\n        });\n        this._joined_channels[channel_id] = true;\n    }\n\n    announceMessage(channel_id) {\n        const user = this.parent.site.getUser();\n        if (!user || !user.id) {\n            return;\n        }\n\n        this.emit(REQUEST_TYPES.ANNOUNCE_MESSAGE, {\n            c_id: channel_id,\n            u_id: user.id,\n        });\n    }\n\n    leaveRoom(channel_id) {\n        if (!this._connected) {\n            return;\n        }\n\n        if (this._joined_channels[channel_id]) {\n            this.emit(REQUEST_TYPES.CHANNEL_UNSUBSCRIBE, {\n                c_id: channel_id,\n            });\n        }\n        this._joined_channels[channel_id] = false;\n    }\n}\n","/* global FrankerFaceZ, fetch */\n\nimport Socket from './socket';\n\nconst GIF_EMOTES_MODE = {\n    DISABLED: 0,\n    STATIC: 1,\n    ANIMATED: 2,\n};\n\nclass LirikLIVE extends FrankerFaceZ.utilities.module.Module {\n    constructor(...args) {\n        super(...args);\n\n        this.inject('settings');\n        this.inject('chat');\n        this.inject('chat.emotes');\n        this.inject('site');\n\n        this.settings.add('ffzap.liriklive.global_emoticons', {\n            default: true,\n\n            ui: {\n                path: 'Add-Ons > FFZ:AP > LIRIK LIVE @{\"description\": \"LIRIK LIVE idea by OBAN_INTERNET\"} >> Emotes',\n                title: 'Global Emotes',\n                description: 'Enable to show LIRIK LIVE global emotes.',\n                component: 'setting-check-box',\n            },\n        });\n\n        this.settings.add('ffzap.liriklive.gif_emotes_mode', {\n            default: 1,\n\n            ui: {\n                path: 'Add-Ons > FFZ:AP > LIRIK LIVE >> Emotes',\n                title: 'GIF Emotes',\n                description: 'Change the mode of how GIF emotes are showing up.',\n                component: 'setting-select-box',\n                data: [\n                    { value: 0, title: 'Disabled' },\n                    { value: 1, title: 'Enabled (Static GIF Emotes)' },\n                    { value: 2, title: 'Enabled (Animated GIF Emotes)' },\n                ],\n            },\n        });\n\n        this.settings.add('ffzap.liriklive.sub_emoticons', {\n            default: true,\n\n            ui: {\n                path: 'Add-Ons > FFZ:AP > LIRIK LIVE >> Emotes',\n                title: 'Subscriber Emotes',\n                description: 'Enable to show additional LIRIK LIVE subscriber emotes.',\n                component: 'setting-check-box',\n            },\n        });\n\n        this.chat.context.on('changed:ffzap.liriklive.global_emoticons', this.updateEmotes, this);\n        this.chat.context.on('changed:ffzap.liriklive.gif_emotes_mode', this.updateEmotes, this);\n        this.chat.context.on('changed:ffzap.liriklive.sub_emoticons', this.updateEmotes, this);\n\n        this.socket = false;\n        this._last_emote_id = 0;\n    }\n\n    onEnable() {\n        this.log.debug('FFZ:AP\\'s LirikLIVE module was enabled successfully.');\n\n        this.updateEmotes();\n\n        this.socket = new Socket(this);\n\n        if (this.chat.context.get('ffzap.liriklive.sub_emoticons')) {\n            this.socket.connect();\n        }\n\n        this.on('chat:room-add', this.roomAdd);\n        this.on('chat:room-remove', this.roomRemove);\n        this.on('chat:pre-send-message', this.preSendMessage);\n\n        for (const room of this.chat.iterateRooms()) {\n            if (room) this.roomAdd(room);\n        }\n    }\n\n    roomAdd(room) {\n        this.socket.joinRoom(room.id);\n    }\n\n    roomRemove(room) {\n        this.socket.leaveRoom(room.id);\n    }\n\n    preSendMessage(event) {\n        if (!this.chat.context.get('ffzap.liriklive.sub_emoticons')) {\n            return;\n        }\n\n        const room = this.chat.getRoom(null, event.channel, true);\n        if (!room || !room.id) {\n            return;\n        }\n\n        this.socket.announceMessage(room.id);\n    }\n\n    updateGlobalEmotes(data) {\n        const realID = 'addon--ffzap.liriklive--emotes-global';\n        this.emotes.removeDefaultSet('addon--ffzap.liriklive', realID);\n        this.emotes.unloadSet(realID);\n\n        if (!this.chat.context.get('ffzap.liriklive.global_emoticons')) {\n            return;\n        }\n\n        const emotes = [];\n\n        const { global, gifs } = data;\n\n        if (global) {\n            for (const dataEmote of global) {\n                const emote = {\n                    id: ++this._last_emote_id,\n                    name: dataEmote.code,\n                    width: dataEmote.width || 28,\n                    height: dataEmote.height || 28,\n                };\n\n                if (dataEmote.id) {\n                    emote.urls = {\n                        1: `https://static-cdn.jtvnw.net/emoticons/v1/${dataEmote.id}/1.0`,\n                        2: `https://static-cdn.jtvnw.net/emoticons/v1/${dataEmote.id}/2.0`,\n                        4: `https://static-cdn.jtvnw.net/emoticons/v1/${dataEmote.id}/3.0`,\n                    };\n                } else {\n                    emote.urls = {\n                        1: `https://cdn.ffzap.com/liriklive/normal/${emote.name}_1.png`,\n                        2: `https://cdn.ffzap.com/liriklive/normal/${emote.name}_2.png`,\n                        4: `https://cdn.ffzap.com/liriklive/normal/${emote.name}_4.png`,\n                    };\n                }\n\n                emotes.push(emote);\n            }\n        }\n\n        if (gifs) {\n            const gifMode = this.chat.context.get('ffzap.liriklive.gif_emotes_mode');\n\t\t\tif (gifMode !== GIF_EMOTES_MODE.DISABLED) { // eslint-disable-line\n                for (const emoteName of gifs) {\n                    const emote = {\n                        id: ++this._last_emote_id,\n                        urls: {\n                            1: `https://cdn.ffzap.com/liriklive/gifs/${emoteName}_1.gif`,\n                            2: `https://cdn.ffzap.com/liriklive/gifs/${emoteName}_2.gif`,\n                            4: `https://cdn.ffzap.com/liriklive/gifs/${emoteName}_4.gif`,\n                        },\n                        name: emoteName,\n                        width: 28,\n                        height: 28,\n                        modifier: emoteName === 'lirikRAIN',\n                    };\n\n                    if (gifMode === GIF_EMOTES_MODE.STATIC) {\n                        emote.urls[1] = `https://cache.ffzap.com/${emote.urls[1]}`;\n                        emote.urls[2] = `https://cache.ffzap.com/${emote.urls[2]}`;\n                        emote.urls[4] = `https://cache.ffzap.com/${emote.urls[4]}`;\n                    }\n\t\n                    emotes.push(emote);\n                }\n            }\n        }\n\n        if (emotes.length === 0) {\n            return;\n        }\n\n        const set = {\n            emoticons: emotes,\n            title: 'Past Emotes',\n            source: 'LIRIK LIVE',\n            icon: 'https://cdn.ffzap.com/liriklive/icon.png',\n            sort: 51,\n            force_global: (emote_set, channel) => channel && channel.login === 'lirik',\n        };\n\n        this.emotes.addDefaultSet('addon--ffzap.liriklive', realID, set);\n    }\n\n    updateSubscriberEmotes(data) {\n        const realID = 'addon--ffzap.liriklive--emotes-subscriber';\n        this.emotes.unloadSet(realID);\n\n        if (!this.chat.context.get('ffzap.liriklive.sub_emoticons')) {\n            return;\n        }\n\n        const emotes = [];\n\n        const { subscriber } = data;\n\n        if (subscriber) {\n            for (const dataEmote of subscriber) {\n                const emote = {\n                    id: ++this._last_emote_id,\n                    name: dataEmote.code,\n                    width: dataEmote.width || 28,\n                    height: dataEmote.height || 28,\n                };\n\n                if (dataEmote.id) {\n                    emote.urls = {\n                        1: `https://static-cdn.jtvnw.net/emoticons/v1/${dataEmote.id}/1.0`,\n                        2: `https://static-cdn.jtvnw.net/emoticons/v1/${dataEmote.id}/2.0`,\n                        4: `https://static-cdn.jtvnw.net/emoticons/v1/${dataEmote.id}/3.0`,\n                    };\n                } else {\n                    emote.urls = {\n                        1: `https://cdn.ffzap.com/liriklive/normal/${emote.name}_1.png`,\n                        2: `https://cdn.ffzap.com/liriklive/normal/${emote.name}_2.png`,\n                        4: `https://cdn.ffzap.com/liriklive/normal/${emote.name}_4.png`,\n                    };\n                }\n\n                emotes.push(emote);\n            }\n        }\n\n        if (emotes.length === 0) {\n            return;\n        }\n\n        const set = {\n            emoticons: emotes,\n            title: 'Subscriber Emotes',\n            source: 'LIRIK LIVE',\n            icon: 'https://cdn.ffzap.com/liriklive/icon.png',\n            merge_id: 'addon--ffzap.liriklive--emotes-global',\n        };\n\n        this.emotes.loadSetData(realID, set);\n    }\n\n    updateRestrictedEmotes(data) {\n        const realID = 'addon--ffzap.liriklive--emotes-restricted';\n        this.emotes.unloadSet(realID);\n\n        if (!this.chat.context.get('ffzap.liriklive.sub_emoticons')) {\n            return;\n        }\n\n        const emotes = [];\n\n        const { restricted } = data;\n\n        if (restricted) {\n            for (const dataEmote of restricted) {\n                const emote = {\n                    id: ++this._last_emote_id,\n                    name: dataEmote.code,\n                    width: dataEmote.width || 28,\n                    height: dataEmote.height || 28,\n                };\n\n                if (dataEmote.id) {\n                    emote.urls = {\n                        1: `https://static-cdn.jtvnw.net/emoticons/v1/${dataEmote.id}/1.0`,\n                        2: `https://static-cdn.jtvnw.net/emoticons/v1/${dataEmote.id}/2.0`,\n                        4: `https://static-cdn.jtvnw.net/emoticons/v1/${dataEmote.id}/3.0`,\n                    };\n                } else {\n                    emote.urls = {\n                        1: `https://cdn.ffzap.com/liriklive/normal/${emote.name}_1.png`,\n                        2: `https://cdn.ffzap.com/liriklive/normal/${emote.name}_2.png`,\n                        4: `https://cdn.ffzap.com/liriklive/normal/${emote.name}_4.png`,\n                    };\n                }\n\n                emotes.push(emote);\n            }\n        }\n\n        if (emotes.length === 0) {\n            return;\n        }\n\n        const set = {\n            emoticons: emotes,\n            title: 'Restricted Emotes',\n            source: 'LIRIK LIVE',\n            icon: 'https://cdn.ffzap.com/liriklive/icon.png',\n            merge_id: 'addon--ffzap.liriklive--emotes-global',\n        };\n\n        this.emotes.loadSetData(realID, set);\n    }\n\n    async updateEmotes(attempts = 0) {\n        this._last_emote_id = 0;\n\n        if (!this.chat.context.get('ffzap.liriklive.global_emoticons') && !this.chat.context.get('ffzap.liriklive.sub_emoticons')) {\n            return;\n        }\n\n        const response = await fetch('https://cdn.ffzap.com/liriklive/emotes.json');\n        if (response.ok) {\n            const data = await response.json();\n\n            this.updateGlobalEmotes(data);\n            this.updateSubscriberEmotes(data);\n            this.updateRestrictedEmotes(data);\n        } else {\n            if (response.status === 404) return;\n\n            const newAttempts = (attempts || 0) + 1;\n            if (newAttempts < 12) {\n                this.log.error('Failed to fetch emotes. Trying again in 5 seconds.');\n                setTimeout(this.updateEmotes.bind(this, newAttempts), 5000);\n            }\n        }\n    }\n}\n\nFrankerFaceZ.get().register('addon.ffzap.liriklive', LirikLIVE).enable();\n"],"sourceRoot":""}